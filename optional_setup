#!/bin/bash
set -eu
#set -x

#miscellaneous setup options for debian linux, rpi4...
#designed to be called after a system is built

declare _BASE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )";
declare -x _BUILD_DIR="${_BASE_DIR}/build"
declare -x _FILE_DIR="${_BASE_DIR}/files"
declare -x _COLOR_ERROR='\033[0;31m'; #red
declare -x _COLOR_WARN='\033[1;33m'; #orange
declare -x _COLOR_INFO='\033[1;32m'; #light blue
declare -x _COLOR_DEBUG='\033[0;37m'; #grey
declare -x _COLOR_NORMAL='\033[0m'; # No Color
declare -x _APT_CMD="apt-get -qq -y";
declare -x _KERNEL_VERSION_FILTER='v8l'
declare -x _LOG_FILE="${_BASE_DIR}/setup.log"

#OPTIONAL CONFIG
declare -x _NEW_DEFAULT_USER='kali'; #default is kali
declare -x _SSH_KEY_PASSPHRASE='CHANGEME'; #the ssh passphrase for your ssh key
declare -x _WIFI_PASSWORD='CHANGEME'; #the password for the wifi

declare -x _DNS1='9.9.9.9'; #primary dns
declare -x _DNS2='1.1.1.1'; #fallback dns

declare -x _CPU_GOVERNOR='performance'; #cpu frequency setting can be 'performance' or if running on battery 'ondemand'. 
declare -x _IODINE_DOMAIN=; #iodine domain
declare -x _IODINE_PASSWORD=; #iodine password
declare -x _OPENVPN_CONFIG_ZIP=''; #name of your zip file for openvpn
declare -x _HOSTNAME='host'; #your rpi's hostname

declare -x _PKGS_TO_INSTALL=''; #a space seperated list of packages to install
declare -x _PKGS_TO_PURGE=''; #a space seperated list of packages to remove

declare -x _SSH_LOCAL_KEYFILE="$_FILE_DIR/id_rsa"; #path to your ssh keyfile
declare -x _SSH_PASSWORD_AUTHENTICATION='no' ;# can be 'yes' or 'no'
declare -x _SSH_BLOCK_SIZE='4096';#suggest a larger blocksize such as 4096
declare -x _SSH_PORT='2222';#port to open for ssh,sftp suggest a non-standard port (not 22). #SSH PORT used in dropbear setup, ufw setup optional scripts
declare -x _WIFI_SSID='WIFI'; #the ssid for your wifi hotspot/router
declare -x _WIFI_INTERFACE='wlan0'; #usually 'wlan0', your network interface
declare -x _INITRAMFS_WIFI_IP=":::::${_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}";
declare -x _INITRAMFS_WIFI_DRIVERS='brcmfmac brcmutil cfg80211 rfkill'; #any custom drivers needed for initramfs wifi 
declare -x _INITRAMFS_WIFI_INTERFACE='wlan0'
declare -x _CHKBOOT_BOOTDISK="/dev/mmcblk0"; #usually /dev/mmcblk0 for sd card installs or /dev/sda
declare -x _SFTP_PASSWORD="CHANGEME"; #ftp user
declare -x _NTP_SERVER="time.cloudflare.com"

print_usage(){
    local usage
    usage=$(cat << 'HERE' 

    Usage: sudo ./optional_setup

    ARG1 can be:
    -r or run - runs any options you have specified in optional_setup
    -h or help - prints this help message

HERE
)
    echo_info "$usage";
}

###############################################
#ALL THE OPTIONS:
#SOME MAY NOT WORK WITH OTHERS.
#FEEL FREE TO MODIFY THE METHODS WITH YOUR CUSTOM CONFIG

#this runs on your build machine
#uncomment to use the options
optional_setup(){
# user_setup; change name of default user
# initramfs_wifi_setup; #enables connection to a wifi router/hotspot on boot
# wifi_setup; #sets up the wifi to connect to a hotspot/router on decrypt
#chkboot_setup; #hashes your boot drive on startup and lets you know if it changes
# display_manager_setup; #disables the gui
# dropbear_setup; #sets up initramfs dropbear
#luks_nuke_setup; #sets up luks nuke kali only
# ssh_setup; #sets up ssh
#cpu_governor_setup; #sets up the cpu 'governor'
#hostname_setup; #sets up the hostname
# root_password_setup; #sets root password
# user_password_setup; #sets kali user password
# vpn_client_setup; #sets up vpn client openvpn
#clamav_setup; #sets up antivirus scanning
fake_hwclock_setup; #sets up fake hardware clock
# apt_upgrade; #apt upgrade
# docker_setup; #docker
ntpsec_setup; #sets up secure ntp 
# iodine_setup; #sets up iodine
vlc_setup; #sets up vlc and fixes audio stutter issue on rpi4
sysctl_hardening_setup; #hardens your sysctl
# passwordless_login_setup; #enables passwordless login of the gui if using a gui
# bluetooth_setup; #sets up bluetooth (modify if you have some bluetooth devices you want to to work)
# apparmor_setup; #apparmor 
# random_mac_on_reboot_setup; #randomizes mac address on machine reboot
firejail_setup; #sets up firejail
# vnc_setup; #sets up vnc
# sftp_setup; #sets up secure ftp
# avahi_setup; #mdns lets you find your device with $hostname.local instead of ip (not currently supported in android)
# packages_setup; #installs, removes packages
miscellaneous_setup; #other stuff - add yours in
secure_dns_setup; #sets up dns, dnssec, dnsovertls
# simple_dns_setup; # sets up resolv.conf only
aide_setup; #configures aide intrusion detection
snapper_setup; #installs snapper (config left to use)
}

#other stuff - add your own!
miscellaneous_setup(){
    echo_function_start;
    #suppress dmesgs in stdout - useful for low power messages if running headless
    echo "@reboot root /bin/sh echo '1' > /proc/sys/kernel/printk" > "/etc/cron.d/suppress-dmesg"

    #disable splash on startup
    atomic_append "disable_splash=1" "/boot/config.txt"

    #set boot to be readonly
    sed -i "s#/boot           vfat    defaults          0       2#/boot           vfat    defaults,noatime,ro,errors=remount-ro          0       2#" \
    "/etc/fstab";

}

main(){
    echo_info "$(basename "$0") started"
    check_run_as_root;
    set_defaults

    case $1 in
        run|-r)
        #mount, run optional setup and generate initramfs
        optional_setup;
	rebuild_kernel
        ;;
	*)
        print_usage
	;;
    esac

    exit 0;
}

rebuild_kernel(){
  if (( REBUILD_KERNEL == 1 )); then
  local modules_dir="${_CHROOT_DIR}/lib/modules/";
  local kernel_version;    
  mount -o remount,rw /boot 
  kernel_version=$(find "${modules_dir}" -maxdepth 1 -regex ".*${_KERNEL_VERSION_FILTER}.*" | tail -n 1 | xargs basename);
  echo_info "kernel is '${kernel_version}'";
  echo_info "running update-initramfs, mkinitramfs"
  update-initramfs -u -k all
  mkinitramfs -o /boot/initramfs.gz -v ${kernel_version}
  fi
}

#used by wifi_setup and initramfs_wifi_setup
#set dns in resolv.conf for setup only or none dnssec setup
#use this OR secure_dns_setup, using both will overwrite one of the config files
simple_dns_setup(){
    echo_function_start;
    echo -e "nameserver $_DNS1\nnameserver $_DNS2" > "/etc/resolv.conf";
}

#create wifi connection to a router/hotspot on boot
#requires: , optional: wifi_setup
initramfs_wifi_setup(){
    # REFERENCE:
    #    http://www.marcfargas.com/posts/enable-wireless-debian-initramfs/
    #    https://wiki.archlinux.org/index.php/Dm-crypt/Specialties#Remote_unlock_via_wifi
    #    http://retinal.dehy.de/docs/doku.php?id=technotes:raspberryrootnfs
    #    use the 'fing' app to find the device if mdns isn't working
    echo_function_start;
    local wifi_psk;
    wifi_psk="$(wpa_passphrase "${_WIFI_SSID}" "${_WIFI_PASSWORD}" | grep "psk=" | grep -v "#psk" | sed 's/^[\t]*//g')"

    echo_info "Attempting to set initramfs WIFI up "

    # Update /boot/cmdline.txt to boot crypt
    if ! grep -wq "${_INITRAMFS_WIFI_IP}" "/boot/cmdline.txt" ; then
        sed -i "s#rootwait#ip=${_INITRAMFS_WIFI_IP} rootwait#g" "/boot/cmdline.txt"
    fi

    echo_info "Copying scripts";
    cp -p "${_FILE_DIR}/initramfs-scripts/zz-brcm" "/etc/initramfs-tools/hooks/"
    cp -p "${_FILE_DIR}/initramfs-scripts/a_enable_wireless" "/etc/initramfs-tools/scripts/init-premount/";
    cp -p "${_FILE_DIR}/initramfs-scripts/hook_enable_wireless" "/etc/initramfs-tools/hooks/"
    cp -p "${_FILE_DIR}/initramfs-scripts/kill_wireless" "/etc/initramfs-tools/scripts/local-bottom/"

    sed -i "s#_WIFI_INTERFACE#${_WIFI_INTERFACE}#g" "/etc/initramfs-tools/scripts/init-premount/a_enable_wireless";
    sed -i "s#_INITRAMFS_WIFI_DRIVERS#${_INITRAMFS_WIFI_DRIVERS}#g" "/etc/initramfs-tools/hooks/hook_enable_wireless";

    echo_info "Creating wpa_supplicant file";
    cat <<- EOT > "/etc/initramfs-tools/wpa_supplicant.conf"
    ctrl_interface=/tmp/wpa_supplicant
    network={
    ssid="${_WIFI_SSID}"
    scan_ssid=1
    key_mgmt=WPA-PSK
    ${wifi_psk}
    }
EOT

    # Adding modules to initramfs modules
    for driver in ${_INITRAMFS_WIFI_DRIVERS}; do
        atomic_append "${driver}" "/etc/initramfs-tools/modules"
    done
    echo_info "initramfs wifi completed";
}

#configure system on decrypt to connect to a hotspot specified in env file
wifi_setup(){
    echo_function_start;
    local wifi_psk;
    wifi_psk="$(wpa_passphrase "${_WIFI_SSID}" "${_WIFI_PASSWORD}" | grep "psk=" | grep -v "#psk" | sed 's/^[\t]*//g')"
    echo_info "Creating wpa_supplicant file"
    cat <<- EOT > "/etc/wpa_supplicant.conf"
    ctrl_interface=/var/run/wpa_supplicant
    network={
    ssid="${_WIFI_SSID}"
    scan_ssid=1
    proto=WPA RSN
    key_mgmt=WPA-PSK
    pairwise=CCMP TKIP
    group=CCMP TKIP
    ${wifi_psk}
    }
EOT

    echo_info "Updating /etc/network/interfaces file"
    if ! grep -qw "# The wifi interface" "/etc/network/interfaces" ; then
        cat <<- EOT >> "/etc/network/interfaces"
    # The wifi interface
    auto ${_WIFI_INTERFACE}
    allow-hotplug ${_WIFI_INTERFACE}
    iface ${_WIFI_INTERFACE} inet dhcp
    wpa-conf /etc/wpa_supplicant.conf
    # pre-up wpa_supplicant -B -Dwext -i${_WIFI_INTERFACE} -c/etc/wpa_supplicant.conf
    # post-down killall -q wpa_supplicant
EOT
    fi

    echo_info "Create connection script /usr/local/bin/sys-wifi-connect.sh"
    cp -pr "${_FILE_DIR}/wifi-scripts/sys-wifi-connect.sh" "/usr/local/bin/sys-wifi-connect.sh"
    sed -i "s|_WIFI_INTERFACE|${_WIFI_INTERFACE}|g" "/usr/local/bin/sys-wifi-connect.sh";
    echo_info "Add to cron to start at boot (before login)"
    cp -pr "${_FILE_DIR}/wifi-scripts/sys-wifi" "/etc/cron.d/sys-wifi"

}

#set up ssh
#requires: , optional: 
ssh_setup(){
    echo_function_start;

    sshd_config="/etc/ssh/sshd_config"
    ssh_authorized_keys="/root/.ssh/authorized_keys"

    # Creating box's default user own key
    create_ssh_key;

    # Append our key to the default user's authorized_keys file
    echo_info "Creating authorized_keys file"
    cat "${_SSH_LOCAL_KEYFILE}.pub" > "${ssh_authorized_keys}"
    chmod 600 "${ssh_authorized_keys}"

    # Update sshd settings
    cp -p "${sshd_config}" "${sshd_config}.bak"
    if ! grep -q -w "#New SSH Config" "${sshd_config}"; then
        cat <<- EOT >> "${sshd_config}"
        #New SSH Config
        PasswordAuthentication ${_SSH_PASSWORD_AUTHENTICATION}
        Port ${_SSH_PORT}
        ChallengeResponseAuthentication no
        PubkeyAuthentication yes
        AuthorizedKeysFile .ssh/authorized_keys
        PermitEmptyPasswords no
        PermitRootLogin yes
        Protocol 2
        ClientAliveInterval 180
        MaxAuthTries 3
        MaxSessions 2
EOT
    fi
}

#setup dropbear in initramfs
#requires: ssh_setup
dropbear_setup(){
    echo_function_start;
    if [ ! -f "${_SSH_LOCAL_KEYFILE}" ]; then
        echo_error "SSH keyfile '${_SSH_LOCAL_KEYFILE}' could not be found. Exiting";
        exit 1;
    fi

    # Installing packages
    ${_APT_CMD} install dropbear dropbear-initramfs cryptsetup-initramfs

    atomic_append "DROPBEAR_OPTIONS='-p $_SSH_PORT -RFEjk -c /bin/unlock.sh'" "/etc/dropbear-initramfs/config";

    #TEST test code - remove later
    #atomic_append "DROPBEAR_OPTIONS='-p $_SSH_PORT -RFEjk'" "/etc/dropbear-initramfs/config";

    # Now append our key to dropbear authorized_keys file
    echo_info "checking ssh key for root@hostname. make sure any host key has this comment.";
    if ! grep -qw "root@${_HOSTNAME}" "/etc/dropbear-initramfs/authorized_keys" ; then
        cat "${_SSH_LOCAL_KEYFILE}.pub" >> "/etc/dropbear-initramfs/authorized_keys";
    fi
    chmod 600 "/etc/dropbear-initramfs/authorized_keys";

    # Update dropbear for some sleep in initramfs
    sed -i 's#run_dropbear \&#sleep 5\nrun_dropbear \&#g' "/usr/share/initramfs-tools/scripts/init-premount/dropbear";

    # Unlock Script
    cp -p "${_FILE_DIR}/initramfs-scripts/hook_dropbear_unlock" "/etc/initramfs-tools/hooks/";
    cp -p "${_FILE_DIR}/initramfs-scripts/unlock.sh" "/etc/initramfs-tools/scripts/unlock.sh";
    sed -i "s#ENCRYPTED_VOLUME_PATH#${_ENCRYPTED_VOLUME_PATH}#g" "/etc/initramfs-tools/scripts/unlock.sh";

    # We not using provided dropbear keys (or backuping generating ones for later usage)
    rm "/etc/dropbear-initramfs/dropbear_rsa_host_key" || true;
    rm "/etc/dropbear-initramfs/dropbear_ed25519_host_key" || true;
    rm "/etc/dropbear-initramfs/dropbear_ecdsa_host_key" || true;
    rm "/etc/dropbear/dropbear_rsa_host_key" || true;
    rm "/etc/dropbear/dropbear_ed25519_host_key" || true;
    rm "/etc/dropbear/dropbear_ecdsa_host_key" || true;

    #backup_dropbear_key "/etc/dropbear-initramfs/dropbear_rsa_host_key";
}

#disable the gui 
display_manager_setup(){
    echo_function_start;
    systemctl set-default multi-user
    echo_warn "To get a gui run startxfce4 on command line"
}

luks_nuke_setup(){
    echo_function_start;
    # Install and configure cryptsetup nuke package if we were given a password
    if [ -n "${_LUKS_NUKE_PASSWORD}" ]; then
        echo_info "Attempting to install and configure encrypted pi cryptsetup nuke password."
        ${_APT_CMD} install cryptsetup-nuke-password
        debconf-set-selections <<- EOT
        cryptsetup-nuke-password cryptsetup-nuke-password/password string ${_LUKS_NUKE_PASSWORD}
        cryptsetup-nuke-password cryptsetup-nuke-password/password-again string ${_LUKS_NUKE_PASSWORD}
EOT
        dpkg-reconfigure -f noninteractive cryptsetup-nuke-password
    else
        echo_warn "Nuke password _LUKS_NUKE_PASSWORD not set. Skipping."
    fi
}

#sets cpu performance mode (useful for running off battery)
cpu_governor_setup(){
    echo_function_start;
    ${_APT_CMD} install cpufrequtils;
    echo_warn "Use cpufreq-info/systemctl status cpufrequtils to confirm the changes when the device is running";
    echo "GOVERNOR=${_CPU_GOVERNOR}" | tee "/etc/default/cpufrequtils";
    systemctl enable cpufrequtils;
}

#custom hostname setup
hostname_setup(){
    echo_function_start;
    # Overwrites /etc/hostname
    echo "${_HOSTNAME}" > "/etc/hostname";
    # Updates /etc/hosts
    sed -i "s#^127.0.0.1       kali#127.0.0.1  ${_HOSTNAME}#" "/etc/hosts";
}

#setup a vpn client
vpn_client_setup(){
    echo_function_start;

    _OPENVPN_CONFIG_ZIPFILE="${_OPENVPN_CONFIG_ZIP}"
    _OPENVPN_CONFIG_ZIPPATH="${_FILE_DIR}/${_OPENVPN_CONFIG_ZIPFILE}"

    echo_info "Assuring openvpn installation and config dir"
    ${_APT_CMD} install openvpn
    mkdir -p "/etc/openvpn"

    echo_info "Unzipping provided files into configuration dir"
    unzip "${_OPENVPN_CONFIG_ZIPPATH}" -d "/etc/openvpn/"

    echo_info "Setting AUTOSTART to ALL on OPENVPN config"
    sed -i '/^AUTOSTART=/s/^/#/' "/etc/default/openvpn"
    sed -i '/^#AUTOSTART="all"/s/^#//' "/etc/default/openvpn"

    echo_info "Enabling service "
    systemctl enable openvpn@client.service
}


#installs clamav and update/scanning daemons, updates to most recent definitions
clamav_setup(){
echo_function_start;
    ${_APT_CMD} install clamav clamav-daemon
    systemctl enable clamav-freshclam.service
    systemctl enable clamav-daemon.service
    freshclam
    echo_info "clamav installed"
}

#simulates a hardware clock
fake_hwclock_setup(){
    echo_function_start;
    ${_APT_CMD} install fake-hwclock
    systemctl enable fake-hwclock
}

#update system
apt_upgrade(){
    echo_function_start;
    $_APT_CMD update
    $_APT_CMD upgrade
}

#install and configure docker
#TODO Test docker
docker_setup(){
    echo_function_start;
    echo_warn "Docker may conflict with VPN services/connections"
    sed -i "s#rootwait#cgroup_enable=memory cgroup_memory=1 rootwait#g" "/boot/cmdline.txt"
    ${_APT_CMD} install docker.io
    systemctl enable docker
    echo_info "docker installed";
}

#install and remove custom packages
packages_setup(){
    echo_function_start;
    chroot_package_purge "${_PKGS_TO_PURGE}";
    ${_APT_CMD} install "${_PKGS_TO_INSTALL}";
}

#sets up aide to run at midnight each night
aide_setup(){
    echo_function_start;
    ${_APT_CMD} install aide
    aideinit
    mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
    cp -p "${_FILE_DIR}/aide-scripts/aide-check" "/etc/cron.d/aide-check"
}

#basic snapper install for use with btrfs, snapshots root directory in its entirety with default settings,
snapper_setup(){
    echo_function_start;
    ${_APT_CMD} install snapper 
    systemctl disable snapper-boot.timer
    systemctl disable snapper-timeline.timer
    echo_warn "Snapper installed, but not configured, services are disabled, enable via systemctl";
}

#secure network time protocol configuration, also installs ntpdate client for manually pulling the time
#requires: , optional: 
chrony_setup(){
    echo_function_start;
    ${_APT_CMD} install chrony
    #https://blog.cloudflare.com/secure-time/
    #add some other nts servers commented in case you prefer to use them
    echo "server ${_NTP_SERVER} iburst nts" >> /etc/chrony/chrony.conf
    systemctl enable ntpsec.service
}

#config iodine
iodine_setup(){
    # REFERENCE:
    #   https://davidhamann.de/2019/05/12/tunnel-traffic-over-dns-ssh/
    echo_function_start;
    ${_APT_CMD} install iodine

    # Create initramfs hook file for iodine
    cp -p "${_FILE_DIR}/initramfs-scripts/zz-iodine" "/etc/initramfs-tools/hooks/"

    # Replace variables in iodine hook file
    sed -i "s#IODINE_PASSWORD#${_IODINE_PASSWORD}#g" "/etc/initramfs-tools/hooks/zz-iodine"
    sed -i "s#IODINE_DOMAIN#${_IODINE_DOMAIN}#g" "/etc/initramfs-tools/hooks/zz-iodine"

    # Create initramfs script file for iodine
    cp -p "${_FILE_DIR}/initramfs-scripts/iodine" "/etc/initramfs-tools/scripts/init-premount/";
    echo_info "iodine setup complete";
}

#vlc_setup, fix broken audio
vlc_setup(){
    echo_function_start;
    ${_APT_CMD} install vlc

    #stuttery audio fix on rpi4
    if ! grep -qx "load-module module-udev-detect tsched=0" "/etc/pulse/default.pa" ; then
        sed -i "s|load-module module-udev-detect|load-module module-udev-detect tsched=0|" "/etc/pulse/default.pa"
    fi

    #bump your gpu memory up too (should make video less bumpy)
    atomic_append "gpu_mem=128" "/boot/config.txt";
}

#automatically log you in after unlocking your encrypted drive, without a password...somehow. GUI only.
#requires: , optional: user_setup
passwordless_login_setup(){
    echo_function_start;
    sed -i "s|^#greeter-hide-users=false|greeter-hide-users=false|" "/etc/lightdm/lightdm.conf"
    sed -i "s|^#autologin-user=$|autologin-user=${_NEW_DEFAULT_USER}|" "/etc/lightdm/lightdm.conf"
    sed -i "s|^#autologin-user-timeout=0|autologin-user-timeout=0|" "/etc/lightdm/lightdm.conf"
}

#enable bluetooth
bluetooth_setup(){
    echo_function_start;
    ${_APT_CMD} install bluez
    systemctl enable bluetooth            
    #TODO setup some bluetooth devices you might have already
}

#TODO Finish apparmor setup method off
# Installs apparmor
apparmor_setup(){
    echo_function_start;
    ${_APT_CMD} install apparmor apparmor-profiles-extra apparmor-utils
    echo_warn "PACKAGES INSTALLED, NO KERNEL PARAMS CONFIGURED. PLEASE CONFIGURE MANUALLY";
    #add apparmor=1 etc to cmdline.txt
    #build kernel with apparmor options. WIP
    systemctl enable apparmor.service
}

#firejail setup
firejail_setup(){
    echo_function_start;
    ${_APT_CMD} install firejail firejail-profiles firetools
    firecfg
    #TODO firejail configuration for hardened malloc, apparmor integration
}

#randomize mac on reboot
random_mac_on_reboot_setup(){
    echo_function_start;
    cp -p "${_FILE_DIR}/random-mac-scripts/mac-spoof.conf" "/etc/NetworkManager/conf.d/mac-spoof.conf";
}

#configures two ipv4 ip addresses as your global dns
#enables dnssec and DNSOverTLS
#disables mdns, llmnr
#credits: https://andrea.corbellini.name/2020/04/28/ubuntu-global-dns/
#requires: , optional: 
secure_dns_setup(){
    echo_function_start;

    if systemctl list-units --full -all | grep -F 'resolvconf.service' ; then
       systemctl disable resolvconf
    fi

    systemctl enable systemd-resolved
    systemctl start systemd-resolved.service

    sed -i "s|^#DNS=|DNS=${_DNS1}|" "/etc/systemd/resolved.conf";
    sed -i "s|^#FallbackDNS=|FallbackDNS=${_DNS2}|" "/etc/systemd/resolved.conf";
    sed -i "s|^#DNSSEC=no|DNSSEC=true|" "/etc/systemd/resolved.conf";
    sed -i "s|^#DNSOverTLS=no|DNSOverTLS=yes|" "/etc/systemd/resolved.conf";
    sed -i "s|^#MulticastDNS=yes|MulticastDNS=no|" "/etc/systemd/resolved.conf";
    sed -i "s|^#LLMNR=yes|LLMNR=no|" "/etc/systemd/resolved.conf";

    cat <<- EOT > "/etc/NetworkManager/conf.d/dns.conf"
[main]
dns=none
systemd-resolved=false

[connection]
llmnr=no
mdns=no

EOT

    #add resolved dns to top of /etc/systemd/resolved.conf for use with NetworkManager:
    atomic_append "nameserver 127.0.0.53" "/etc/systemd/resolved.conf"

    echo_info "creating symlink";
    touch "/etc/resolv.conf"
    mv "/etc/resolv.conf" "/etc/resolv.conf.backup";
    ln -s /etc/systemd/resolved.conf /etc/resolv.conf;
    echo_info "DNS configured - remember to keep your clock up to date (date -s XX:XX) or DNSSEC Certificate errors may occur";
}

#chkboot setup detects boot changes on startup
chkboot_setup(){
    echo_function_start;
    local boot_partition;
    local prefix="";

    mkdir -p /var/lib/chkboot

    ${_APT_CMD} install chkboot;

    #if the device contains mmcblk, prefix is set so the device name is picked up correctly
    if [[ "${_CHKBOOT_BOOTDISK}" == *'mmcblk'* ]]; then
        prefix='p'
    fi
    #Set the proper name of the output block device's partitions
    #e.g /dev/sda1 /dev/sda2 etc.
    boot_partition="${_CHKBOOT_BOOTDISK}${prefix}1"

    sed -i "s#BOOTDISK=/dev/sda#BOOTDISK=${_CHKBOOT_BOOTDISK}#" "/etc/default/chkboot";
    sed -i "s#BOOTPART=/dev/sda1#BOOTPART=${boot_partition}#" "/etc/default/chkboot";

    systemctl enable chkboot
}

user_setup(){
    echo_function_start;
    local default_user='kali'
    if [ ${_NEW_DEFAULT_USER} != ${default_user} ]; then
        "deluser ${default_user}"
        groupadd -g 1000 ${_NEW_DEFAULT_USER}
        useradd -m -u 1000 -g 1000 -G sudo,audio,bluetooth,cdrom,dialout,dip,lpadmin,netdev,plugdev,scanner,video,${_NEW_DEFAULT_USER} -s /bin/bash ${_NEW_DEFAULT_USER} 

        echo ${_NEW_DEFAULT_USER}:${_USER_PASSWORD} | /usr/sbin/chpasswd
    fi
}

#TODO finish this off
#sets up a vnc server on your device
#requires: , optional: ssh_setup
vnc_setup(){
    echo_function_start;
    ${_APT_CMD} install tightvncserver
    local vnc_user='vnc'; #new vnc user is better
    adduser "${vnc_user}"
    vnc_user_home=;
    #run and kill vnc server once to set up the directory structure
    echo "${VNC_PASSWORD}" | vncpasswd -f > "${vnc_user_home}/.vnc/passwd"
}

#TODO Test sftp
#requires: ssh_setup, optional: 
sftp_setup(){
    echo_function_start;

    ${_APT_CMD} install openssh-sftp-server
    groupadd sftp_users
    useradd -g sftp_users -d /data/sftp/upload -s /sbin/nologin sftp
    echo sftp:${_SFTP_PASSWORD} | /usr/sbin/chpasswd
    mkdir -p /data/sftp/upload
    chown -R root:sftp_users /data/sftp
    chown -R sftp:sftp_users /data/sftp/upload

    cat <<- EOT > "/etc/ssh/ssh_config.d/sftp_config"
    Match Group sftp_users
    ChrootDirectory /data/%u
    ForceCommand internal-sftp
EOT

}

#MDNS daemon setup - WIP
#TODO test initramfs avahi
#requires: hostname_setup ssh_setup , optional: 
avahi_setup(){
    echo_function_start;

    ${_APT_CMD} install avahi-daemon libnss-mdns
    'systemctl enable avahi-daemon'
    sed -i "s|<port>22</port>|<port>${_SSH_PORT}</port>|" "/usr/share/doc/avahi-daemon/examples/ssh.service";
    cp -p "/usr/share/doc/avahi-daemon/examples/ssh.service" "/etc/avahi/services/ssh.service";


    #make avahi work in initramfs too
    cp -p "${_FILE_DIR}/initramfs-scripts/b_enable_avahi_daemon" "/etc/initramfs-tools/scripts/init-premount/";
    cp -p "${_FILE_DIR}/initramfs-scripts/hook_enable_avahi_daemon" "/etc/initramfs-tools/hooks/";
    sed -i "s|_SSH_PORT|${_SSH_PORT}|" "/etc/initramfs-tools/hooks/hook_enable_avahi_daemon";
    cp -p "/etc/avahi/avahi-daemon.conf" "/etc/initramfs-tools/avahi-daemon.conf";
    sed -i "s|#enable-dbus=yes|enable-dbus=no|" "/etc/initramfs-tools/avahi-daemon.conf";
}

#sysctl hardening (taken fron lynis audit)
#TODO test commented sysctl.conf variables
sysctl_hardening_setup(){
    echo_function_start;
    cp -p "/etc/sysctl.conf" "/etc/sysctl.conf.bak";
    atomic_append "#dev.tty.ldisc_autoload = 0" "/etc/sysctl.conf";
    atomic_append "#fs.protected_fifos = 2" "/etc/sysctl.conf";
    atomic_append "fs.protected_hardlinks = 1" "/etc/sysctl.conf";
    atomic_append "#fs.protected_regular = 2" "/etc/sysctl.conf";
    atomic_append "fs.protected_symlinks = 1" "/etc/sysctl.conf";
    atomic_append "#fs.suid_dumpable = 0" "/etc/sysctl.conf";
    atomic_append "#kernel.core_uses_pid = 1" "/etc/sysctl.conf";
    atomic_append "#kernel.ctrl-alt-del = 0" "/etc/sysctl.conf";
    atomic_append "kernel.dmesg_restrict = 1" "/etc/sysctl.conf";
    atomic_append "#kernel.kptr_restrict = 2" "/etc/sysctl.conf";
    atomic_append "#kernel.modules_disabled = 1" "/etc/sysctl.conf";
    atomic_append "#kernel.perf_event_paranoid = 3" "/etc/sysctl.conf";
    atomic_append "#kernel.randomize_va_space = 2" "/etc/sysctl.conf";
    atomic_append "kernel.sysrq = 0" "/etc/sysctl.conf";
    atomic_append "#kernel.unprivileged_bpf_disabled = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.accept_redirects = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.accept_source_route = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.bootp_relay =  0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.forwarding = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.log_martians = 1" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.mc_forwarding = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.proxy_arp = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.rp_filter = 1" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.all.send_redirects = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.default.accept_redirects = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.default.accept_source_route = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv4.conf.default.log_martians = 1" "/etc/sysctl.conf";
    atomic_append "net.ipv4.icmp_echo_ignore_broadcasts = 1" "/etc/sysctl.conf";
    atomic_append "net.ipv4.icmp_ignore_bogus_error_responses = 1" "/etc/sysctl.conf";
    atomic_append "net.ipv4.tcp_syncookies = 1" "/etc/sysctl.conf";
    atomic_append "net.ipv4.tcp_timestamps = 0 1" "/etc/sysctl.conf";
    atomic_append "net.ipv6.conf.all.accept_redirects = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv6.conf.all.accept_source_route = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv6.conf.default.accept_redirects = 0" "/etc/sysctl.conf";
    atomic_append "net.ipv6.conf.default.accept_source_route = 0" "/etc/sysctl.conf";
}

#checks if a function is defined optional_setup, takes a function name as argument
function_exists() {
    functions_in_optional_setup=$(sed -n '/optional_setup(){/,/}/p' ${BASH_SOURCE[0]} | sed '/optional_setup(){/d' | sed '/}/d' | sed 's/^[ \t]*//g' | sed '/^#/d' | cut -d';' -f1 | tr '\n' ' ')
    
    grep -q "$1" <<< "$functions_in_optional_setup" > /dev/null
    return $?
}

# method default parameter settings, if a variable is "" or unset, sets it to a reasonable default 
set_defaults(){
echo_function_start;
set +eu

set_default "_KERNEL_VERSION_FILTER" "MANDATORY"

if function_exists "user_setup" || function_exists "user_password_setup"; then
    set_default "_NEW_DEFAULT_USER" "MANDATORY"
fi

if function_exists "root_password_setup"; then
    set_default "_ROOT_PASSWORD" "CHANGEME" 
fi

if function_exists "user_password_setup"; then
    set_default "_USER_PASSWORD" "CHANGEME"
fi

if function_exists "luks_nuke_setup"; then
    set_default "_LUKS_NUKE_PASSWORD" "."
fi

if function_exists "secure_dns_setup"; then
    set_default "_DNS1" "1.1.1.1"
    set_default "_DNS2" "9.9.9.9"
fi

if function_exists "simple_dns_setup"; then
    set_default "_DNS1" "1.1.1.1"
    set_default "_DNS2" "9.9.9.9"
fi

if function_exists "cpu_governor_setup"; then
    set_default "_CPU_GOVERNOR" "performance"
fi

if function_exists "hostname_setup"; then
    set_default "_HOSTNAME" "pikal"
fi

if function_exists "packages_setup"; then
    set_default "_PKGS_TO_INSTALL" ""
    set_default "_PKGS_TO_PURGE" ""
fi

if function_exists "ssh_setup"; then
    set_default "_SSH_KEY_PASSPHRASE" "CHANGEME"
    set_default "_SSH_LOCAL_KEYFILE" "${_FILE_DIR}/id_rsa.pub"
    set_default "_SSH_PASSWORD_AUTHENTICATION" "no"
    set_default "_SSH_BLOCK_SIZE" "4096"
    set_default "_SSH_PORT" "2222"
    set_default "_NEW_DEFAULT_USER" "MANDATORY"

fi

if function_exists "iodine_setup"; then
    set_default "_IODINE_DOMAIN" "MANDATORY"
    set_default "_IODINE_PASSWORD" "MANDATORY"
fi

if function_exists "vpn_client_setup"; then
    set_default "_OPENVPN_CONFIG_ZIP" "MANDATORY"
fi

if function_exists "wifi_setup"; then
    set_default "_WIFI_PASSWORD" "CHANGEME"
    set_default "_WIFI_SSID" "WIFI"
    set_default "_WIFI_INTERFACE" "wlan0"
fi

if function_exists "random_mac_on_reboot_setup"; then
    set_default "_WIFI_INTERFACE" "wlan0"
fi

if function_exists "initramfs_wifi_setup"; then
    set_default "_INITRAMFS_WIFI_INTERFACE" "wlan0"
    set_default "_INITRAMFS_WIFI_IP"  ":::::${_INITRAMFS_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}"
    set_default "_INITRAMFS_WIFI_DRIVERS" 'brcmfmac brcmutil cfg80211 rfkill';
fi

if function_exists "chkboot_setup"; then
    set_default "_CHKBOOT_BOOTDISK" "MANDATORY"
fi

if function_exists "sftp_setup"; then
    set_default "_SFTP_PASSWORD" "CHANGEME"
fi

set -eu

#echo out settings for this run
set | grep '^_' > "${_LOG_FILE}"
}

#runs through the functions specified in optional_setup
#checks if each function in options.sh has a requires comment
#of the form '#requires: ???_setup , optional: ???_setup' 
options_check(){
echo_function_start;
#get list of functions specified in optional_setup:
functions_in_optional_setup=$(sed -n '/optional_setup(){/,/}/p' ${BASH_SOURCE[0]} | sed '/optional_setup(){/d' | sed '/}/d' | sed 's/^[ \t]*//g' | sed '/^#/d' | cut -d';' -f1 | tr '\n' ' ')
echo_info "$functions_in_optional_setup";
for function in $functions_in_optional_setup; do
    line_above_function_declaration=$(grep -B 1 "^${function}()" ${BASH_SOURCE[0]}| grep -v "${function}()")    
    
    if grep -q '^#requires:' <<< "$line_above_function_declaration"; then 
    list_of_prerequisites=$(echo "$line_above_function_declaration" | cut -d':' -f2 | sed 's/^[ \t]*//g' | cut -d',' -f1)
    if [[ -n "$list_of_prerequisites" ]]; then 
        echo_info "$function - requires: $list_of_prerequisites" 
    fi
    for prerequisite in $list_of_prerequisites; do 
    #check the prerequisite occurs before the function in $functions_in_optional_setup
        int_position_of_prereq=$(get_position_in_array "$prerequisite" "$functions_in_optional_setup")
        if [[ -z "$int_position_of_prereq" ]]; then 
        echo_error "$prerequisite for $function is missing";
        exit 1;
        fi
        int_position_of_function=$(get_position_in_array "$function" "$functions_in_optional_setup")
        echo_info "$int_position_of_prereq"
        echo_info "$int_position_of_function"
        if (( int_position_of_prereq > int_position_of_function )); then
        echo_error "$prerequisite is called after $function in optional_setup(), please amend function order"#
        exit 1;
        fi
    done
    fi
    
    if grep -q 'optional:' <<< "$line_above_function_declaration"; then 
    list_of_optional_prerequisites=$(echo "$line_above_function_declaration" | cut -d':' -f3 | sed 's/^[ \t]*//g')
    if [[ -n "$list_of_optional_prerequisites" ]]; then 
        echo_info "$function - optionally requires: $list_of_optional_prerequisites"
    fi
    for prerequisite in $list_of_optional_prerequisites; do 
        #check the prerequisite occurs before the function in $functions_in_optional_setup
        int_position_of_prereq=$(get_position_in_array "$prerequisite" "$functions_in_optional_setup")
        if [[ -z "$int_position_of_prereq" ]]; then 
            echo_warn "optional $prerequisite for $function is missing";
        fi
        int_position_of_function=$(get_position_in_array "$function" "$functions_in_optional_setup")
        echo_info "$int_position_of_prereq"
        echo_info "$int_position_of_function"
        if (( int_position_of_prereq > int_position_of_function )); then
            echo_error "$prerequisite is called after $function in optional_setup(), please amend function order"
            exit 1;
        fi
    done
    fi
done

}

#sets a given variable_name $1 to a default value $2
#if the default passed in is 'MANDATORY', then exit as then
#a function has been called without a mandatory
#variable set
set_default(){
local var_name="$1"
local default_value="$2"
local current_value;
current_value="$(eval echo "\$${var_name}")"
if [[ -n "$current_value" ]]; then
    echo_info "${var_name} was set to '${current_value}'";
else
    if [[ $default_value == 'MANDATORY' ]]; then
    echo_error "${var_name} was not set and is mandatory, please amend env.sh'";
    exit 1;
    fi
    echo_warn "${var_name} set to default value '${default_value}'";
    export "${var_name}"="${default_value}";
fi
}

#appends config to a file after checking if it's already in the file
#$1 the config value $2 the filename
atomic_append(){
CONFIG="$1";
FILE="$2";
if ! grep -qx "${CONFIG}" "${FILE}" ; then
    echo "${CONFIG}" >> "${FILE}";
fi
}

####PRINT FUNCTIONS####
echo_error(){ 
echo -e "${_COLOR_ERROR}$(date '+%H:%M:%S'): ERROR: ${*}${_COLOR_NORMAL}" | tee -a "${_LOG_FILE}";
}
echo_warn(){ 
echo -e "${_COLOR_WARN}$(date '+%H:%M:%S'): WARNING: ${*}${_COLOR_NORMAL}" | tee -a "${_LOG_FILE}";
}
echo_info(){ 
echo -e "${_COLOR_INFO}$(date '+%H:%M:%S'): INFO: ${*}${_COLOR_NORMAL}" 
}
echo_function_start(){
echo_info "function ${FUNCNAME[1]} started";
}

#checks if script was run with root
check_run_as_root(){
echo_function_start;
if (( EUID != 0 )); then
    echo_error "This script must be run as root/sudo";
    exit 1;
fi
}

#gets from local filesystem or generates a ssh key and puts it on the build 
create_ssh_key(){
echo_function_start;
local id_rsa="${_FILE_DIR}/id_rsa";

if [ ! -f "${id_rsa}" ]; then 
    echo_info "generating ${id_rsa}";
    ssh-keygen -b "${_SSH_BLOCK_SIZE}" -N "${_SSH_KEY_PASSPHRASE}" -f "${id_rsa}" -C "root@${_HOSTNAME}";
fi

chmod 600 "${id_rsa}";
chmod 644 "${id_rsa}.pub";
echo_info "copying keyfile ${id_rsa} to box's default user .ssh directory";
mkdir -p "${_CHROOT_DIR}/root/.ssh/" || true
cp -p "${id_rsa}" "${_CHROOT_DIR}/root/.ssh/id_rsa";
cp -p "${id_rsa}.pub" "${_CHROOT_DIR}/root/.ssh/id_rsa.pub";        
}

#puts the sshkey into your files directory for safe keeping
backup_dropbear_key(){
echo_function_start;
local temporary_keypath="${1}";
local temporary_keyname;
temporary_keyname="${_FILE_DIR}/$(basename "${temporary_keypath}")";

#if theres a key in your files directory copy it into your chroot directory
# if there isn't, copy it from your chroot directory into your files directory
if [ -f "${temporary_keyname}" ]; then
    cp -p "${temporary_keyname}" "${temporary_keypath}";
    chmod 600 "${temporary_keypath}";
else
    cp -p "${temporary_keypath}" "${temporary_keyname}";
fi
}

# Run program
main "${1:-'NOARGS'}";
